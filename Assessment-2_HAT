from google.colab import files
import pandas as pd

# Upload the file
uploaded = files.upload()  # Prompt for file upload

# Use the uploaded file name here
file_path = 'Employee Sample Data 1.csv'

# Specify encoding to avoid UnicodeDecodeError
df = pd.read_csv(file_path, encoding='ISO-8859-1')

# Preview the dataset
df.head()

# Dictionary to store collections
collections = {}

# Function to create a collection
def createCollection(p_collection_name):
    global collections
    collections[p_collection_name] = df.copy()
    print(f"Collection '{p_collection_name}' created.")

# Function to index data by excluding a column (but not excluding Department)
def indexData(p_collection_name, p_exclude_column):
    global collections
    if p_collection_name in collections:
        if p_exclude_column in collections[p_collection_name].columns:
            collections[p_collection_name] = collections[p_collection_name].drop(columns=[p_exclude_column], errors='ignore')
            print(f"Data indexed for collection '{p_collection_name}', excluding column '{p_exclude_column}'.")
        else:
            print(f"Column '{p_exclude_column}' does not exist in collection '{p_collection_name}'.")
    else:
        print(f"Collection '{p_collection_name}' does not exist.")

# Function to search by a column
def searchByColumn(p_collection_name, p_column_name, p_column_value):
    global collections
    if p_collection_name in collections:
        if p_column_name in collections[p_collection_name].columns:
            try:
                result = collections[p_collection_name][collections[p_collection_name][p_column_name] == p_column_value]
                if result.empty:
                    print(f"No records found for {p_column_name} = '{p_column_value}' in collection '{p_collection_name}'.")
                return result
            except Exception as e:
                print(f"An error occurred while searching: {str(e)}")
        else:
            print(f"Column '{p_column_name}' does not exist in collection '{p_collection_name}'.")
    else:
        print(f"Collection '{p_collection_name}' does not exist.")
    return pd.DataFrame()  # Return an empty DataFrame if search fails

# Function to get employee count
def getEmpCount(p_collection_name):
    global collections
    if p_collection_name in collections:
        return len(collections[p_collection_name])
    else:
        print(f"Collection '{p_collection_name}' does not exist.")
        return 0

# Function to delete employee by ID
def delEmpById(p_collection_name, p_employee_id):
    global collections
    if p_collection_name in collections:
        collections[p_collection_name] = collections[p_collection_name][collections[p_collection_name]['Employee ID'] != p_employee_id]
        print(f"Employee with ID '{p_employee_id}' deleted from collection '{p_collection_name}'.")
    else:
        print(f"Collection '{p_collection_name}' does not exist.")

# Function to get department facet
def getDepFacet(p_collection_name):
    global collections
    if p_collection_name in collections:
        if 'Department' in collections[p_collection_name].columns:
            return collections[p_collection_name].groupby('Department').size()
        else:
            print(f"Column 'Department' does not exist in collection '{p_collection_name}'.")
            return pd.Series()  # Return empty series if column doesn't exist
    else:
        print(f"Collection '{p_collection_name}' does not exist.")
        return pd.Series()  # Return an empty Series if the collection does not exist

# a) Var v_nameCollection = ‘Hash_<Your Name>’
v_nameCollection = 'Hash_John'

# b) Var v_phoneCollection = 'Hash_<Your Phone last four digits>'
v_phoneCollection = 'Hash_1234'

# c) createCollection(v_nameCollection)
createCollection(v_nameCollection)

# d) createCollection(v_phoneCollection)
createCollection(v_phoneCollection)

# e) getEmpCount(v_nameCollection)
print(f"Employee count in {v_nameCollection}: {getEmpCount(v_nameCollection)}")

# f) Exclude 'Gender' instead of 'Department' in the name collection
indexData(v_nameCollection, 'Gender')

# Exclude 'Gender' for the phone collection
indexData(v_phoneCollection, 'Gender')

# h) getEmpCount(v_nameCollection)
print(f"Employee count in {v_nameCollection} after indexing: {getEmpCount(v_nameCollection)}")

# i) delEmpById(v_nameCollection, 'E02003')
delEmpById(v_nameCollection, 'E02003')

# j) getEmpCount(v_nameCollection)
print(f"Employee count in {v_nameCollection} after deletion: {getEmpCount(v_nameCollection)}")

# k) searchByColumn(v_nameCollection, 'Department', 'IT')
search_result_it = searchByColumn(v_nameCollection, 'Department', 'IT')
print(f"Search result for Department='IT' in {v_nameCollection}:\n{search_result_it}")

# l) searchByColumn(v_nameCollection, 'Gender', 'Male')
search_result_male = searchByColumn(v_nameCollection, 'Gender', 'Male')
print(f"Search result for Gender='Male' in {v_nameCollection}:\n{search_result_male}")

# m) searchByColumn(v_phoneCollection, 'Department', 'IT')
search_result_it_phone = searchByColumn(v_phoneCollection, 'Department', 'IT')
print(f"Search result for Department='IT' in {v_phoneCollection}:\n{search_result_it_phone}")

# n) getDepFacet(v_nameCollection)
dep_facet_name = getDepFacet(v_nameCollection)
print(f"Department facet for {v_nameCollection}:\n{dep_facet_name}")

# o) getDepFacet(v_phoneCollection)
dep_facet_phone = getDepFacet(v_phoneCollection)
print(f"Department facet for {v_phoneCollection}:\n{dep_facet_phone}")
